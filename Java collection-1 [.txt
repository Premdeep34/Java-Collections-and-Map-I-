List:

* List is child interface of collection.
* Group of individual objects are defined as a single entity where duplicates are allowed and insertion order is preserved.

================================================================
Set:

* Set is the child interface of collection.
* Group of individual objects are defined as a single entity where duplicates are not allowed and insertion order is not preserved.

Vice-versa of each other(list and set)

=================================================================
Difference between List and Set:

=================================================================
SortedSet vs Navigable Set:

SortedSet:
* It is the child interface of Set.
* Group of individual objects are defined as a single entity where duplicates are not allowed. But all the objects are inserted according to some sorting algorithm.

Navigable Set:
* It is the child interface of Sorted Set. It defines several methods for navigation purpose.

===================================================================
Queue:
* It is the child interface of Collection.
* Group of individual objects are defined for prior to processing.

Note: All the above interfaces (Collection, List, Set, SortedSet, NavigableSet and Queue) meant for representing a group of individual objects.
* If we want to represent a group of objects as a key value pairs then we should go for Map interface.

====================================================================
7 - Map(I):

* It is not the child interface of Collection.
* Group of individual objects are defined as a key value pairs. Both key and value are objects.
* All keys are unique(No duplicates). But values could be duplicate.

====================================================================
8 - SortedMap(I):

* It is not the child interface of Map.
* It represents a group of key value pairs according to some sorting order of keys.

----------------------------
9 - NavigableMap(I):

* It is the child interface of SortedMap. It provides several utility methods for navigation purpose.

====================================================================
Q> Difference between Comparable(I) and Comparator(I)?
A: Comparable: It goes for default natural sorting order.
   Comparator: It goes for customizing sorting order.

---------------------------------
Cursor: To get objects one-by-one from collection. Three types:
1. Enumeration(I)
2. Iterator(I)
3. ListIterator(I)

---------------------------------
Utility Classes:
1. Collections and 2. Arrays

---------------------------------
Q> What is the difference bw List and Set?
Q> What is the difference bw ArrayList and Vector?
Q> What is the difference bw HashSet and HashMap?
Q> What is the difference bw HashMap and HashTable?

==========================================================================================
Collection Framework - Collection interface details

* Collection interface defines the most common methods which are applicable for any collection object.

boolean add(Object o)
boolean addAll(Collection c)
boolean remove(Object o)
boolean removeAll(Collection c)
void clear()
boolean retainAll(Collection c)	
boolean isEmpty()
int size()
boolean contains(Object c)
boolean containsAll(Object c)
Object[] toArray()
Iterator iterator()

Note: Collection interface doesn't contain any method to retrieve objects.







