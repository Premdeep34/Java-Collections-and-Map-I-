									+++{Queue(I)}+++

1.5v enhancements Queue(I):
*  It is the child interface of collection, list, set, queue
* Queue
	-PriorityQueue
	-BlockingQueue
		-PriorityBlockingQueue
		-LinkedBlockingQueue

* If we want to represent a group of individual objects prior to processing then we should go for Queue.
for eg: Before sending sms message all mobile numbers we have to store in some data structure. In which order we added mobile numbers, In the same order only message
should be delivered. For these FIFO requirement Queue is the best choice.

* Usually Queue follows FIFO order. But based on our requirement we can implement our own priority order also (Priority Queue).
* From 1.5v onwards LinkedList class also implements Queue interface.
* LinkedList based implimentation of Queue always follows FIFO order.

---------------------------------------------------------------------------------
Queue(I) specific methods:

1. boolean offer(Object o): To add an object into the queue.

2. Object poll(): If queue is not empty it removes and returns the head element of the queue. Else it returns null.
3. Object remove(): If queue is not empty it removes and returns the head element of the queue. Else it returns a RE. NoSuchElementException.

4. Object peek(): If queue is not empty it returns the head element of the queue. Else it returns null.
5. Object element(): If queue is not empty it returns the head element of the queue. Else it returns a RE. NoSuchElementException.

=======================================================================================================================================================================
									+++{PriorityQueue(C)}+++

* If we want to represent a group of individual obj.'s prior to processing acc. to some priority then we should go for priority queue.
* The priority can be either default natural sorting order or customized sorting order defined by comparator.
* Insertion order is not preserved and it is based on some priority.
* Duplicates obj.'s are not allowed.
* If we are depending on default natural sorting order compulsary the obj.'s should be homogeneous and comparable. Otherwise we will get runtime exception saying 
ClassCastException
* If we are defining our own sorting sorting by comparator then obj.'s need not be homogeneous and comparable.
* Null is not allowed even as the first element also.

---------------------------------------------------------------------------------
Constructors:

1. PriorityQueue q = new PriorityQueue();
Creates an empty priority queue with default initial capacity of 11. And all objects will be inserted acc. to default natural sorting order(DNSO).

2. PriorityQueue q = new PriorityQueue(int initialCapacity);
3. PriorityQueue q = new PriorityQueue(int initialCapacity, Comparator c);
4. PriorityQueue q = new PriorityQueue(SortedSet s);
5. PriorityQueue q = new PriorityQueue(Collection c);

Note: Some platforms won't provide proper support for thread priorities and priority queues.

[Demo program for customized priority]
